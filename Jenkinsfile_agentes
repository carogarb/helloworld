pipeline {
    agent none

    options {
        timestamps()
        parallelsAlwaysFailFast()
        skipDefaultCheckout()
        timeout(time: 5, unit: 'MINUTES')
    }

    stages {
 
        stage('Checkout code') {
                agent {
                    label 'agent1'
                }
                steps {
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                        sh 'hostname'
                        git branch: 'main', url: 'https://github.com/carogarb/helloworld.git'
                        stash name: 'source', includes: '**'                   
                    }
                }
            }

        stage('Build code') {
                agent {
                    label 'agent2'
                }
                steps {
                    sh 'hostname'
                    echo 'Not needed with python'
                }
            }
                
        stage('Run tests') {
            parallel {

                stage('Unit tests') {
                    agent {
                        label 'agent1'
                    }
                    steps {
                        unstash 'source'
                        sh '''
                            hostname
                            export PYTHONPATH=.
                            pytest --junitxml=result-unit.xml test//unit
                        '''
                        stash name: 'unit-test', includes: 'result-unit.xml' 
                    }
                }                

                stage('Integration tests') {
                    agent {
                        label 'principal'
                    }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                hostname
                                export FLASK_APP=app//api.py
                                export FLASK_ENV=development
                                flask run &
                            '''
                            
                             sh 'java -jar /opt/wiremock/wiremock-standalone.jar --port 9090 --root-dir /opt/wiremock > wiremock.log 2>&1 &'

                            sleep(time:10, unit:"SECONDS")
                        }    
 
                        unstash 'source'
                        sh '''
                            hostname
                            export PYTHONPATH=.
                            pytest --junitxml=result-rest.xml test//rest
                        '''
                        stash name: 'integration-test', includes: 'result-rest.xml' 
                    }
                } 
                              
            }
        }
        
        stage('Results') {
            agent {
                    label 'agent2'
            }
            steps {
                unstash 'unit-test'
                unstash 'integration-test'
                sh 'hostname'
                junit 'result*.xml'
            }
        }
            
    }
   
    post {
        always {
            node('agent1') {
                cleanWs()
            }
        }
    }
    
}